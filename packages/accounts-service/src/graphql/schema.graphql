# =================
# SDL for root types such as queries and mutations
# =================
extend type Query {
  requestPasswordResetEmail(email: String!): Boolean!
  user(id: String, username: String, email: String): UserResult!
}

extend type Mutation {
  signup(data: CreateUserInput!): SignupResult!
  signupWithExternalProvider(username: String!): SignupResult!
  automateLoginProcess: AutomateLoginResult!
  login(username: String!, password: String!): LoginResult!
  resetPassword(data: ResetPasswordInput): ResetPasswordResult!
}

# =================
# User-related SDL
# =================

type User @key(fields: "id") {
  id: ID!
  picture: String
  provider: AccountProvider!
  username: String!
  email: String!
  name: String!
  password: String!
  role: UserRole!
  lastPasswordChange: String
}

enum UserRole {
  USER
  ADMIN
}

enum AccountProvider {
  GOOGLE
  NONE
}

# =================
# Auth-related SDL:
# types which will be used as the result to queries by using them in unions
# =================

type TakenUsernameOrEmail {
  message: String!
}

type InvalidDataFormat {
  message: String!
}

type SuccessfulAuthentication {
  user: User!
  csrfToken: String!
}

type InvalidCredentials {
  message: String!
}

type InvalidOrMissingUserIdentifier {
  message: String!
}

type InvalidOrExpiredToken {
  message: String!
}

type PasswordsDontMatch {
  message: String!
}

type UserNotFound {
  message: String!
}

# Unions for auth which combine the previous types.
# This is a better approach for error handling than just throwing errors,
# the GraphQL twitter representative talks about this in the following link
# https://medium.com/@sachee/200-ok-error-handling-in-graphql-7ec869aec9bc

union UserResult = User | UserNotFound | InvalidDataFormat

union ResetPasswordResult = User | InvalidOrExpiredToken | PasswordsDontMatch

union AutomateLoginResult =
    SuccessfulAuthentication
  | InvalidOrMissingUserIdentifier

union SignupResult =
    SuccessfulAuthentication
  | InvalidDataFormat
  | TakenUsernameOrEmail

union LoginResult =
    SuccessfulAuthentication
  | InvalidDataFormat
  | InvalidCredentials

# =================
# SDL for input types used for this service's queries/mutations
# =================

input ResetPasswordInput {
  currentPassword: String!
  newPassword: String!
  token: String!
}

input CreateUserInput {
  picture: String
  username: String!
  email: String!
  name: String!
  password: String!
}
